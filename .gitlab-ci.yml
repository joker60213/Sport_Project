# Определяем этапы выполнения pipeline
stages:
  - install    # Установка зависимостей
  - build      # Сборка проекта
  - test       # Запуск тестов
  - deploy     # Деплой в registry

# Глобальные переменные
variables:
  NODE_VERSION: "20.11.1"
  DOCKER_REGISTRY: "141.105.64.223:5050"
  DOCKER_IMAGE_NAME: "athlo/web-app"

# Кэширование для ускорения сборки
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
  policy: pull-push

# Этап установки зависимостей
install:
  stage: install
  image: node:${NODE_VERSION}
  tags:
    - docker
  script:
    - npm ci
  cache:
    policy: pull-push

# Этап сборки проекта
build:
  stage: build
  image: node:${NODE_VERSION}
  tags:
    - docker
  script:
    - npm ci  # Устанавливаем зависимости
    - npm run build
  artifacts:
    paths:
      - dist/
  cache:
    policy: pull

# Этап тестирования
test:
  stage: test
  image: node:${NODE_VERSION}
  tags:
    - docker
  script:
    - npm ci  # Устанавливаем зависимости
    - npm run test || true  # Продолжаем даже если тестов нет
  cache:
    policy: pull
  allow_failure: true  # Разрешаем этапу завершиться с ошибкой

# Этап деплоя в registry
deploy:
  stage: deploy
  image: docker:20.10.16
  tags:
    - docker
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  script:
    # Собираем и пушим образ с тегом коммита
    - docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA}
    
    # В зависимости от ветки добавляем дополнительные теги
    - |
      if [ "$CI_COMMIT_BRANCH" = "develop" ]; then
        # Для develop ветки используем тег dev
        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:dev
        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:dev
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        # Для main ветки используем тег latest
        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHA} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest
        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest
      fi
